#include <string>
#include <iostream>
#include <vector>
#include <fstream>
#include <sstream>
#include <istream>
#include <iterator>
#include <cmath>
#define max_x 101
#define max_y 101
//101

int find_diff(std::string first,std::string second) {
    std::vector<char> diff;
    int arr[7] = { 0 };
    //0 1 2 3 4 5 6
    //a b c d e f g
    for (int i = 0; i < first.size(); i++) {
        int smf = first[i]-'a';
        arr[smf]++;
    }
    for (int i = 0; i < second.size(); i++) {
        int smf = second[i] - 'a';
        arr[smf]++;
    }
    for (int i = 0; i < 7; i++) {
        if (arr[i] == 1) {
            diff.push_back(i + 'a');
        }
    }
    int size=diff.size();
    return size;
}
int compare(std::string first,std::string second){
    std::vector<char> diff;
    int arr[7] = { 0 };
    //0 1 2 3 4 5 6
    //a b c d e f g
    for (int i = 0; i < first.size(); i++) {
        int smf = first[i]-'a';
        arr[smf]++;
    }
    for (int i = 0; i < second.size(); i++) {
        int smf = second[i] - 'a';
        arr[smf]++;
    }
    for (int i = 0; i < 7; i++) {
        if (arr[i] == 1) {
            return 0;
        }
    }
    return 1;
}
bool low_points_detect(int map[max_y+1][max_x+1],int y,int x){
    if(x==0 and y==0){
        if(map[y][x]<map[y+1][x] and map[y][x]<map[y][x+1]) return 1;
    }
    if(x==0 and y==max_y){
        if(map[y][x]<map[y-1][x] and map[y][x]<map[y][x+1]) return 1;
    }
    if(x==max_x and y==0){
        if(map[y][x]<map[y+1][x] and map[y][x]<map[y][x-1]) return 1;
    }
    if(x==max_x and y==max_y){
        if(map[y][x]<map[y-1][x] and map[y][x]<map[y][x-1]) return 1;
    }
    if(x==0 and y!=0 and y!=max_y){
        if(map[y][x]<map[y-1][x] and map[y][x]<map[y+1][x] and map[y][x]<map[y][x+1]) return 1;
    }
    if(x==max_x and y!=0 and y!=max_y){
        if(map[y][x]<map[y-1][x] and map[y][x]<map[y+1][x] and map[y][x]<map[y][x-1]) return 1;
    }
    if(y==0 and x!=0 and x!=max_x){
        if(map[y][x]<map[y][x+1] and map[y][x]<map[y][x-1] and map[y][x]<map[y+1][x]) return 1;
    }
    if(y==max_y and x!=0 and x!=max_x){
        if(map[y][x]<map[y][x+1] and map[y][x]<map[y][x-1] and map[y][x]<map[y-1][x]) return 1;
    }
    if(x!=0 and x!=max_x and y!=0 and y!=max_y){
        if(map[y][x]<map[y][x+1] and map[y][x]<map[y][x-1] and map[y][x]<map[y-1][x] and map[y][x]<map[y+1][x]) return 1;
    }
    return 0;
}
void ploshad(int &plo,char map[max_y+1][max_x+1],int y,int x){
    if(map[y][x]!='x')plo++;
    map[y][x]='@';
    if(map[y][x+1]!='@'){
        ploshad(plo,map,y,x+1);
    }
    if(map[y+1][x]!='@'){
        ploshad(plo,map,y+1,x);
    }
    if(map[y][x-1]!='@'){
        ploshad(plo,map,y,x-1);
    }
    if(map[y-1][x]!='@'){
        ploshad(plo,map,y-1,x);
    }
}
int main() {


    std::ifstream file("D:\\CLion_2021.2.1\\MyProjects\\day_8\\new_input.txt");
    std::string line;
    char map[max_y+1][max_x+1]={'.'};
    int j=0;
    while (getline(file, line)) {


        std::istringstream ss(line);
        std::istream_iterator<std::string> begin(ss), end;

        //putting all the tokens in the vector
        std::vector<std::string> arrayTokens(begin, end);
        /*for(int i=0;i<=max_x;i++){
            if(arrayTokens[0][i]-'0'==9){
                map[j][i]='@';
            }
            else{
                map[j][i]='.';
            }
        }*/
        for(int i=0;i<=max_x;i++){
            if(arrayTokens[0][i]=='@'){
                map[j][i]='@';
            }
            else if(arrayTokens[0][i]=='x'){
                map[j][i]='x';
            }
            else{
                map[j][i]='.';
            }
        }
        j++;
    }
    int max_1=0,max_2=0,max_3=0;
    for(int y=1;y<=max_y-1;y++){
        for(int x=1;x<=max_x-1;x++)
        {
                if(map[y][x]=='.') {
                    int plo = 0;
                    ploshad(plo, map, y, x);
                    if(plo>=max_1){
                        max_3=max_2;
                        max_2=max_1;
                        max_1=plo;
                    }
                }

        }
    }
    for(int y=0;y<=max_y;y++){
        for(int x=0;x<=max_x;x++){
            std::cout<<map[y][x];
        }
        std::cout<<std::endl;
    }
    std::cout<<max_1<<" "<<max_2<<" "<<max_3<<std::endl;
    std::cout<<max_1*max_2*max_3;

    return 0;
}
